#
# -- Windows - build GLE executable
#     no manual or installer creation
#     runs on commit
#     binary installation folder saved
#
name: Build Windows
on:
  workflow_dispatch:
  #pull_request:
  #push:
  #  branches: [main]
env:
  BUILD_TYPE: Release
  TRIPLET: x64-windows-static-release
  MY_VCPKG_ROOT: d:/vp
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite"

jobs:
  build:
    name: Build Windows
    runs-on: windows-latest
    steps:

    - name: Checkout GLE
      uses: actions/checkout@v4

    - name: Acquire vcpkg
      uses: actions/checkout@v4
      with:
        repository: "Microsoft/vcpkg"
        path: vcpkg

      # move to shorter path for Qt6
    - name: Move Vcpkg to MY_VCPKG_ROOT
      shell: pwsh
      run: |
          Move-Item -Path "$env:GITHUB_WORKSPACE\vcpkg" -Destination "${{env.MY_VCPKG_ROOT}}"

    - name: Bootstrap vcpkg
      run: "${{env.MY_VCPKG_ROOT}}/bootstrap-vcpkg.bat"
      shell: cmd

    - name: Configure NuGet Source for Caching
      shell: pwsh
      env:
        GH_PAT: ${{ secrets.GLE_NUGET_CACHE_PAT }}
        MY_VCPKG_ROOT: ${{ env.MY_VCPKG_ROOT }}
      run: |
        $nugetPath = & "$env:MY_VCPKG_ROOT/vcpkg" fetch nuget
        & $nugetPath sources Add -Name github -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -Username "${{ github.repository_owner }}" -Password "$env:GH_PAT"

    - name: Install ECM package using vcpkg
      run: "${{env.MY_VCPKG_ROOT}}/vcpkg install ecm"
      shell: cmd

      # header files needed for building of GLE
    - name: Acquire Ghostscipt/PDL
      uses: actions/checkout@v4
      with:
        repository: "ArtifexSoftware/ghostpdl"
        path: ghostpdl

      # needed for running tests findgs
    - name: Choco Install Ghostscript
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install ghostscript --no-progress

      # use powershell to add correct gs path since version number may change
    - name: Add Ghostcript to PATH using PowerShell
      shell: pwsh
      run: >
        $o = Get-ChildItem -Path "C:\Program Files\gs" -Directory | Where-Object { $_.Name -like "gs*" };
        $g=$o.FullName+"\bin" ; echo $g | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # if this fails then gs is not in path
    - name: Display gs version
      shell: cmd
      run: gswin64c --version

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      env:
        VCPKG_INSTALLED_DIR: ${{env.MY_VCPKG_ROOT}}
      run: >
        cmake -B build -S src
        -DCMAKE_TOOLCHAIN_FILE=${{env.MY_VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{env.TRIPLET}}
        -DGHOSTPDL_ROOT=${{github.workspace}}/ghostpdl
        -DMSVC_USE_STATIC_RUNTIME=ON
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/stage
        -DGLE_EXAMPLES_LIBRARY_PATH="${{github.workspace}}/gle-library"
        -DGLE_USER_MANUAL_PATH="${{github.workspace}}/gle-manual"
        -DECM_DIR="${{env.MY_VCPKG_ROOT}}/installed/x64-windows/share/ECM"
        -DBUILD_TESTS=ON
      shell: cmd

    - name: Build
      working-directory: ${{ github.workspace }}
      run: |
        cmake --build build --config ${{env.BUILD_TYPE}}
      shell: cmd

    - name: Install
      working-directory: ${{ github.workspace }}
      run: |
        cmake --install build --config ${{env.BUILD_TYPE}}
      shell: cmd

    - name: Upload Artifacts - zip file of installation folder
      uses: actions/upload-artifact@v4.4.3
      with:
        name: Windows Binaries
        path: ${{github.workspace}}/stage
        if-no-files-found: warn
        retention-days: 0
        compression-level: 0


# for debugging
    #- name: List directory
    #  run: DIR /S "${{ github.workspace }}/build/vcpkg_installed/x64-windows-static-release/include/poppler"
    #  shell: cmd


# - name: Enable GitHub Actions Cache backend
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
    #       core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    #- name: Copy custom triplet to vcpkg
    #  run: copy src\x64-windows-static-release-only.cmake vcpkg\triplets\
     # shell: cmd

    #- name: Install dependencies with custom buildtrees
    #  working-directory: ${{ github.workspace }}/src
    #  run: >
      #   ..\vcpkg\vcpkg install
      #   --x-buildtrees-root=${{env.VCPKG_BUILD_TREES_ROOT}}
      #   --x-install-root=${{env.MY_VCPKG_ROOT}}
      #   --x-packages-root=${{env.VCPKG_PACAKGES_ROOT}}
      #   --triplet ${{env.TRIPLET}}
      # shell: cmd
