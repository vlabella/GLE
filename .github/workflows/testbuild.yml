# single platform cmake build for windows
name: Windows Build
on:
  workflow_dispatch:
env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  BUILD_TYPE: Release
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Checkout GLE
      uses: actions/checkout@v4

    - name: Checkout GLE Library
      uses: actions/checkout@v4
      with:
        repository: "vlabella/gle-library"
        path: gle-library

    - name: Checkout GLE Manual
      uses: actions/checkout@v4
      with:
        repository: "vlabella/gle-manual"
        path: gle-manual

    - name: Display gle library path
      shell: cmd
      run: dir ${{github.workspace}}\gle-manual

    - name: Acquire vcpkg
      uses: actions/checkout@v4
      with:
        repository: "Microsoft/vcpkg"
        path: vcpkg

    - name: Bootstrap vcpkg
      run: "${{ github.workspace }}\\vcpkg\\bootstrap-vcpkg.bat"
      shell: cmd

    - name: Enable GitHub Actions Cache backend
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Acquire Ghostscipt/PDL
      uses: actions/checkout@v4
      with:
        repository: "ArtifexSoftware/ghostpdl"
        path: ghostpdl

    - name: Choco Install MikTeX
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install miktex --no-progress

    - name: Choco Install Perl
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install straberryperl --no-progress

    - name: Display straberry perl path
      shell: cmd
      run: dir C:\strawberry\perl

    - name: Choco Install NSIS
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install nsis --no-progress

    - name: Display Perl Path
      shell: cmd
      run: dir "C:\perl64"

    - name: Add MikTex to PATH PowerShell
      shell: pwsh
      run: |
       echo "C:/Program Files/MikTeX/miktex/bin/x64;C:/perl64/bin;C:/strawberry/perl/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Add MikTex to PATH CMD
      shell: cmd
      run: set PATH=%PATH%;"C:\Program Files\MikTeX\miktex\bin\x64;C:\perl64\bin;C:\strawberry\perl\bin"

    - name: Configure MikTeX
      shell: cmd
      run: |
        set PATH=%PATH%;"C:\Program Files\MikTeX\miktex\bin\x64"
        initexmf --admin --verbose --set-config-value=[MPM]AutoInstall=1
        miktex --admin --verbose packages update-package-database
        miktex --admin --verbose packages update
        miktex --verbose packages update
        miktex --admin --verbose packages install cm-super
        miktex --admin --verbose fndb refresh
        initexmf --admin --verbose --update-fndb
        initexmf --admin --verbose --mklinks --force
        updmap --admin

    - name: Configure CMake
      run: >
        cmake -S ${{github.workspace}}\src -B ${{github.workspace}}\build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DVCPKG_TARGET_TRIPLET=x64-windows-static-release
        -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DGHOSTPDL_ROOT=${{github.workspace}}/ghostpdl
        -DUSE_STATIC_RUNTIME=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/stage
        -DGLE_EXAMPLES_LIBRARY_PATH="${{github.workspace}}/gle-library"
        -DGLE_USER_MANUAL_PATH="${{github.workspace}}/gle-manual"

    - name: Build
      run: |
        cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: |
        cmake -DBUILD_TYPE=Release -P ${{github.workspace}}\build\cmake_install.cmake

    - name: Build Manual
      working-directory: ${{github.workspace}}\gle-manual
      run: |
        set PATH=%PATH%;"C:\Program Files\MikTeX\miktex\bin\x64;C:\perl64\bin;C:\strawberry\perl\bin"
        nmake /nologo -f Makefile.vc GLE_TOP=${{github.workspace}}\stage

    - name: Package
      working-directory: ${{github.workspace}}\build
      run: |
        cpack -G "NSIS;ZIP;7Z" -C ${{env.BUILD_TYPE}} -B "${{github.workspace}}\stage"