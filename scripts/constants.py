#
# -- constants.py - generate cpp code for pysical and  numerical constants
#  cut and paste output into drawit.cpp
import scipy as sp


# void gle_set_numerical_constants() {
# 	//
# 	// -- numerical (or mathematical) constants preceded with nc_ in GLE
# 	//
# 	//	  it is equivalent to the user adding the code
# 	//    PI = 3.14159....
# 	//    the GLE_PI constants are defined in all.h
# 	//    var_findadd_set("PI", GLE_PI);
# 	//    use boost::math::constants for best precisison
# 	//    GLE varaibles are case insensitve so add as uppercase
# 	//
	
# 	var_findadd_set("NC_PI",boost::math::double_constants::pi);
# 	var_findadd_set("NC_TWO_PI",boost::math::double_constants::two_pi);
# 	var_findadd_set("NC_ROOT_PI",boost::math::double_constants::root_two);
# 	var_findadd_set("NC_HALF_PI",boost::math::double_constants::half_pi);
# 	var_findadd_set("NC_ROOT_TWO",boost::math::double_constants::root_two);
# 	var_findadd_set("NC_ROOT_THREE",boost::math::double_constants::root_three);
# 	var_findadd_set("NC_E",boost::math::double_constants::e);
# }

# void gle_set_physical_constants() {
# 	//
# 	// -- physical constants pc_ in GLE
# 	//
# 	//    GLE variables are case insensitve so add as uppercase
# 	//    code autogenerated from scripts\constants.py and scipy.constants library
# 	//
# 	var_findadd_set("PI",boost::math::double_constants::pi);
# 	var_findadd_set("NC_PI",boost::math::double_constants::pi);
# 	var_findadd_set("NC_TWO_PI",boost::math::double_constants::two_pi);
# 	var_findadd_set("NC_ROOT_PI",boost::math::double_constants::root_two);
# 	var_findadd_set("NC_HALF_PI",boost::math::double_constants::half_pi);
# 	var_findadd_set("NC_ROOT_TWO",boost::math::double_constants::root_two);
# 	var_findadd_set("NC_ROOT_THREE",boost::math::double_constants::root_three);
# 	var_findadd_set("NC_E",boost::math::double_constants::e);

# }

pc_wart = "pc_"
mc_wart = "mc_"
filename = "constants.h"
# variable names in scipy.constants.
# add use of database value(key) if needed
scipy_physical_constants = [
	"c",
	"speed_of_light",
	"mu_0",
	"epsilon_0",
	"h",
	"Planck",
	"hbar",
	"G",
	"gravitational_constant",
	"g",
	"e",
	"elementary_charge",
	"R",
	"gas_constant",
	"alpha",
	"fine_structure",
	"N_A",
	"Avogadro",
	"k",
	"Boltzmann",
	"sigma",
	"Stefan_Boltzmann",
	"Wien",
	"Rydberg",
	"m_e",
	"electron_mass",
	"m_p",
	"proton_mass",
	"m_n",
	"neutron_mass",
	"zero_Celsius"
]

boost_math_constants = [
    "pi",
    "two_pi",
    "half_pi",
    "third_pi",
    "quarter_pi",
    "one_over_pi",
    "two_over_pi",
    "one_over_two_pi",
    "root_two",
    "root_three",
    "root_pi",
    "root_two_pi",
    "root_ln_four",
    "root_e",
    "root_two_e",
    "root_ln_two",
    "one_over_root_two",
    "half_root_two",
    "e",
    "half",
    "third",
    "two_thirds",
    "phi",
    "ln_phi",
    "catalan",
    "euler",
    "degree",
    "radian",
    "phi",
    "zeta_two",
    "zeta_three"
]

file = []
file.append('//')
file.append('// -- gle_constants.h')
file.append('//')
file.append('//  automatically generated from scripts/constants.py')
file.append('//  re-run manually and copy file to src/gle to modify')
file.append('//  uses boost::math for numerical constants')
file.append('//  uses scipy.constants for physical constants')
file.append(f'//  mathematical constants start with {mc_wart}')
file.append(f'//  physical constants start with {pc_wart}')
file.append('//')
file.append('//  gle variables are case in-sensitive')
file.append('//')
file.append('#include <boost/math/constants/constants.hpp>');
file.append('//')
file.append('void gle_set_constants(numerical=true,physical=true)')
file.append("{")
tb="\t"
file.append(tb+'// option to omit inclusion of types if desired -- possible future GLE option')
file.append(tb+"if(numerical){")
tb="\t\t"
for c in boost_math_constants:
	#print(f"{c} {eval(f"sp.constants.{c}")}")
	file.append(f"{tb}var_findadd_set(\"{mc_wart}{c}\",boost::math::double_constants::{c});")

tb="\t"
file.append(tb+"}")

file.append(tb+"if(physical){")
tb="\t\t"
for c in scipy_physical_constants:
	#print(f"{c} {eval(f"sp.constants.{c}")}")
	file.append(f"{tb}var_findadd_set(\"{pc_wart}{c}\",{eval(f"sp.constants.{c}")});")

tb="\t"
file.append(tb+"}")
file.append("}")
with open('../src/gle/gle_constants.h', 'w') as fp:
    # Iterate over the list and write each item to the file
    for line in file:
        fp.write(line + '\n')


for c in scipy_physical_constants:
	print(f"{pc_wart}{c}, ",end = "")

print()

for c in boost_math_constants:
	print(f"{mc_wart}{c}, ",end = "")

